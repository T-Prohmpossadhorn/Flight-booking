// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	booking "github.com/T-Prohmpossadhorn/flight-booking/internal/domain/booking"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Flight is an autogenerated mock type for the Flight type
type Flight struct {
	mock.Mock
}

// GetBasePrice provides a mock function with given fields: seatClass
func (_m *Flight) GetBasePrice(seatClass string) float64 {
	ret := _m.Called(seatClass)

	if len(ret) == 0 {
		panic("no return value specified for GetBasePrice")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(seatClass)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetColumns provides a mock function with given fields: seatClass
func (_m *Flight) GetColumns(seatClass string) int {
	ret := _m.Called(seatClass)

	if len(ret) == 0 {
		panic("no return value specified for GetColumns")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(seatClass)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetDeparture provides a mock function with no fields
func (_m *Flight) GetDeparture() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeparture")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetMutex provides a mock function with given fields: seatClass
func (_m *Flight) GetMutex(seatClass string) booking.Mutex {
	ret := _m.Called(seatClass)

	if len(ret) == 0 {
		panic("no return value specified for GetMutex")
	}

	var r0 booking.Mutex
	if rf, ok := ret.Get(0).(func(string) booking.Mutex); ok {
		r0 = rf(seatClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(booking.Mutex)
		}
	}

	return r0
}

// GetRows provides a mock function with given fields: seatClass
func (_m *Flight) GetRows(seatClass string) int {
	ret := _m.Called(seatClass)

	if len(ret) == 0 {
		panic("no return value specified for GetRows")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(seatClass)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetSeats provides a mock function with given fields: seatClass
func (_m *Flight) GetSeats(seatClass string) []booking.Seat {
	ret := _m.Called(seatClass)

	if len(ret) == 0 {
		panic("no return value specified for GetSeats")
	}

	var r0 []booking.Seat
	if rf, ok := ret.Get(0).(func(string) []booking.Seat); ok {
		r0 = rf(seatClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.Seat)
		}
	}

	return r0
}

// NewFlight creates a new instance of Flight. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlight(t interface {
	mock.TestingT
	Cleanup(func())
}) *Flight {
	mock := &Flight{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
